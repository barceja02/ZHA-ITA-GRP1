/*
 * File: app/controller/BookingController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
var openBkgType;
var createbkg;
var home;
Ext.define('layout.controller.BookingController', {
    extend: 'Ext.app.Controller',
  requires: [
        'layout.controller.override.BookingController'
    ],
    refs: [
        {
            ref: 'comgrp1bkgCreateBooking',
            selector: '#CreateBooking'
        },
        {
            ref: 'comgrp1bkgvpHome',
            selector: '#com.grp1.bkg.vpHome'
        }
    ],

    onHomeBtnViewBkgClick: function(button, e, eOpts) {
        alert('Hello');
    },

    onHomeBtnCreateBkgClick: function(button, e, eOpts) {
        openBkgType = "create";
        createbkg = Ext.create('layout.view.com.grp1.bkg.CreateBooking');
        createbkg.show();
    },

    onHomeBtnEditBkgClick: function(button, e, eOpts) {
    	var grid = Ext.getCmp('mygridpanel');
        if(grid.getSelectionModel().getSelection().length===1){
        	var selectedRow = grid.getSelectionModel().getSelection()[0];
        	openBkgType = "edit";
        	createbkg = Ext.create('layout.view.com.grp1.bkg.CreateBooking');//need to create first
      		Ext.getCmp('txtBkgNum').setValue(selectedRow.data.bookingNum);
        	Ext.getCmp('txtCntrNum').setValue(selectedRow.data.containerNumber);
        	Ext.getCmp('cntrTypeComboBox').setValue(selectedRow.data.containerType);
        	Ext.getCmp('txtCgoDesc').setValue(selectedRow.data.cargoDescrpiption);
        	Ext.getCmp('txtGrossWeight').setValue(selectedRow.data.grossWeight);
        	Ext.getCmp('gUnitComboBox').setValue(selectedRow.data.grossUnit);
        	Ext.getCmp('txtNetWeight').setValue(selectedRow.data.netWeight);
        	Ext.getCmp('nUnitComboBox').setValue(selectedRow.data.netUnit);
        	Ext.getCmp('fromCityComboBox').setValue(selectedRow.data.fromCity);
        	Ext.getCmp('toCityComboBox').setValue(selectedRow.data.toCity);
        	Ext.getCmp('txtShipper').setValue(selectedRow.data.shipperId);
        	Ext.getCmp('txtConsignee').setValue(selectedRow.data.consigneeId);
        	Ext.getCmp('chkWtValid').setValue(selectedRow.data.isWeightValid);
        	Ext.getCmp('chkGoodCust').setValue(selectedRow.data.isCustomerGood);
        	Ext.getCmp('chkDocsApproved').setValue(selectedRow.data.isDocumentApproved);
        	
        	var cgoNature = selectedRow.data.cargoNature;
        	if(cgoNature === "AW"){ Ext.getCmp('AWRadioButton').setValue(true); }
        	if(cgoNature === "RF"){ Ext.getCmp('RFRadioButton').setValue(true); }
        	if(cgoNature === "DG"){ Ext.getCmp('DGRadioButton').setValue(true); }
        	if(cgoNature === "GC"){ Ext.getCmp('GCRadioButton').setValue(true); }
        	
       		createbkg.show();
       		createbkg.setTitle("Edit");  
       		
       		//populate
       		
        }else{
            alert('Select only 1 record to edit');
        }
    },

    onTxtCntrNumBlur: function(component, e, eOpts) {
        var cntrNum = Ext.getCmp('txtCntrNum').getValue();

        var pattern =  /^[A-Za-z]{4}[0-9]{6}?$/;

        if(cntrNum.match(pattern)){
        }
        else{
            Ext.Msg.alert("Validation Error", "Container Number should first have 4 letters and 6 digits");
        }
    },

    onBtnCreateBkgClick: function(button, e, eOpts) {
        var cntrNum = Ext.getCmp('txtCntrNum').getValue(),
            cntrType = Ext.getCmp('cntrTypeComboBox').getValue(),
            cgoNature,
            cgoDesc = Ext.getCmp('txtCgoDesc').getValue(),
            GrossWeight = Ext.getCmp('txtGrossWeight').getValue(),
            GrossUnit = Ext.getCmp('gUnitComboBox').getValue(),
            NetWeight = Ext.getCmp('txtNetWeight').getValue(),
            NetUnit = Ext.getCmp('nUnitComboBox').getValue(),
            FromCity = Ext.getCmp('fromCityComboBox').getValue(),
            ToCity = Ext.getCmp('toCityComboBox').getValue(),
            shipper = Ext.getCmp('txtShipper').getValue(),
            consignee = Ext.getCmp('txtConsignee').getValue(),
            isWtValid,
        	isGoodCust,
        	isDocApproved,
        	isGC = Ext.getCmp('GCRadioButton').getValue(),
        	isDG = Ext.getCmp('DGRadioButton').getValue(),
        	isAW = Ext.getCmp('AWRadioButton').getValue(),
        	isRF = Ext.getCmp('RFRadioButton').getValue(),
        	isConfirmed;
        if(isGC){
        	cgoNature = 'GC';
        }
        if(isRF){
        	cgoNature = 'RF';
        }
        if(isAW){
        	cgoNature = 'AW';
        }
        if(isDG){
        	cgoNature = 'DG';
        }
        /*
            isWtValid = Ext.getCmp('chkWtValid').getValue(),
        	isGoodCust = Ext.getCmp('chkGoodCust').getValue(),
        	isDocApproved = Ext.getCmp('chkDocsApproved').getValue(),
        	*/
        if(Ext.getCmp('chkWtValid').getValue() === true)
        { isWtValid = 1; } else { isWtValid = 0; }
        if(Ext.getCmp('chkGoodCust').getValue() === true)
        { isGoodCust = 1; } else { isGoodCust = 0; }
        if(Ext.getCmp('chkDocsApproved').getValue() === true)
        { isDocApproved = 1; } else { isDocApproved = 0; }
        var confirmed = isWtValid && isGoodCust && isDocApproved;
        
        //create or edit
        if(cntrNum !== null && cntrType !== null && cgoDesc !== null && FromCity !== null && ToCity !== null && shipper !== null && consignee !== null){
        	if(FromCity !== ToCity){
        		if(GrossWeight > NetWeight){
        			if(isWtValid && isGoodCust && isDocApproved){
                		var bkg = Ext.create('layout.model.BookingInfoModel', {
                			bookingNum : Ext.getCmp('txtBkgNum').getValue(),
                			shipperId : Ext.getCmp('txtShipper').getValue(),
                			consigneeId : Ext.getCmp('txtConsignee').getValue(),
                			containerNumber : cntrNum,
                			containerType : cntrType,
                			cargoNature : cgoNature,
                			cargoDescrpiption : cgoDesc,
                			grossWeight : GrossWeight,
                			netWeight : NetWeight,
                			fromCity : FromCity,
                			toCity : ToCity,
                			createdBy : Ext.getCmp('txtfUsername').getValue(),
                			createDate : "12/12/2017",
                			updatedBy : Ext.getCmp('txtfUsername').getValue(),
                			updateDate : "12/12/2017",
                			isActive : 1,
                			grossUnit : GrossUnit,
                			netUnit : NetUnit,
                			isWeightValid : isWtValid,
                			isCustomerGood : isGoodCust,
                			isDocumentApproved : isDocApproved,
                			isConfirmed : confirmed
                		});
                	}else{
                		var bkg = Ext.create('layout.model.BookingInfoModel', {
                			bookingNum : Ext.getCmp('txtBkgNum').getValue(),
                			shipperId : Ext.getCmp('txtShipper').getValue(),
                			consigneeId : Ext.getCmp('txtConsignee').getValue(),
                			containerNumber : cntrNum,
                			containerType : cntrType,
                			cargoNature : cgoNature,
                			cargoDescrpiption : cgoDesc,
                			grossWeight : GrossWeight,
                			netWeight : NetWeight,
                			fromCity : FromCity,
                			toCity : ToCity,
                			createdBy : Ext.getCmp('txtfUsername').getValue(),
                			createDate : "20170101",
                			updatedBy : Ext.getCmp('txtfUsername').getValue(),
                			updateDate : "20170101",
                			isActive : 1,
                			grossUnit : GrossUnit,
                			netUnit : NetUnit,
                			isWeightValid : isWtValid,
                			isCustomerGood : isGoodCust,
                			isDocumentApproved : isDocApproved,
                			isConfirmed : confirmed
                		});
                	}
                	if(openBkgType === "create"){
                			Ext.Ajax.request({
                				url : 'createBkg',
                				method : 'POST',
                				jsonData : Ext.encode(bkg.data),
                				success : function(response){
                					alert(response.responseText);
                					this.createbkg.close();
                				},
                				failure : function(response) {
                					alert("Create Booking Failed");
                					console.log(response);
                					console.log("Update function ajax request failed");
                				}
                			});
                    }else if(openBkgType === "edit"){
                			Ext.Ajax.request({
                				url : 'editBkg',
                				method : 'POST',
                				jsonData : Ext.encode(bkg.data),
                				success : function(response){
                					alert(response.responseText);
                					this.createbkg.close();
                				},
                				failure : function(response) {
                					alert("Update Booking Failed");
                					console.log(response);
                					console.log("Update function ajax request failed");
                				}
                			});
                		}
                	else{
                        Ext.Msg.alert("Can't Create Booking", "Validation Should be all true");
                	}
        		}
        		else{
        			Ext.Msg.alert("Can't Create Booking", "Gross Weight Must be greater than Net Weight");
        		}
        	}
        	else{
        		Ext.Msg.alert("Can't Create Booking", "To City must not be the same as From City");
        	}
        }
        else{
           // Show error
         Ext.Msg.alert("Can't Create Booking", "Please complete all fields");
        }
    },

    onCreateBookingBeforeShow: function(component, eOpts) {
    	var txtCntrNum = Ext.getCmp('txtCntrNum');
    	var cntrTypeComboBox = Ext.getCmp('cntrTypeComboBox');
    	var cgoNatureRadioGrp = Ext.getCmp('cgoNatureRadioGrp');
    	var txtCgoDesc = Ext.getCmp('txtCgoDesc');
    	var txtGrossWeight = Ext.getCmp('txtGrossWeight');
    	var gUnitComboBox = Ext.getCmp('gUnitComboBox');
    	var txtNetWeight = Ext.getCmp('txtNetWeight');
    	var nUnitComboBox = Ext.getCmp('nUnitComboBox');
    	var fromCityComboBox = Ext.getCmp('fromCityComboBox');
    	var toCityComboBox = Ext.getCmp('toCityComboBox');
    	var txtShipper = Ext.getCmp('txtShipper');
    	var txtConsignee = Ext.getCmp('txtConsignee');
    	var btnCreateBkg = Ext.getCmp('btnCreateBkg');
    	var chkWtValid = Ext.getCmp('chkWtValid');
    	var chkGoodCust = Ext.getCmp('chkGoodCust');
    	var chkDocsApproved = Ext.getCmp('chkDocsApproved');
    	
        if(openBkgType === 'view'){
        	txtCntrNum.disable();
        	cntrTypeComboBox.disable();
        	cgoNatureRadioGrp.disable();
        	txtCgoDesc.disable();
        	txtGrossWeight.disable();
        	gUnitComboBox.disable();
        	txtNetWeight.disable();
        	nUnitComboBox.disable();
        	fromCityComboBox.disable();
        	toCityComboBox.disable();
        	txtShipper.disable();
        	txtConsignee.disable();
        	btnCreateBkg.hide();
        	chkWtValid.disable();
        	chkGoodCust.disable();
        	chkDocsApproved.disable();
        }
    },

    onCreateBookingClose: function(panel, eOpts) {
        createbkg.destroy();
    },
    
    onHomeBtnViewBookingClick: function(panel, eOpts) {
    	var grid = Ext.getCmp('mygridpanel');
        if(grid.getSelectionModel().getSelection().length===1){
        	var selectedRow = grid.getSelectionModel().getSelection()[0];
        	openBkgType = "view";
        	createbkg = Ext.create('layout.view.com.grp1.bkg.CreateBooking');//need to create first
      		Ext.getCmp('txtBkgNum').setValue(selectedRow.data.bookingNum);
        	Ext.getCmp('txtCntrNum').setValue(selectedRow.data.containerNumber);
        	Ext.getCmp('cntrTypeComboBox').setValue(selectedRow.data.containerType);
        	Ext.getCmp('txtCgoDesc').setValue(selectedRow.data.cargoDescrpiption);
        	Ext.getCmp('txtGrossWeight').setValue(selectedRow.data.grossWeight);
        	Ext.getCmp('gUnitComboBox').setValue(selectedRow.data.grossUnit);
        	Ext.getCmp('txtNetWeight').setValue(selectedRow.data.netWeight);
        	Ext.getCmp('nUnitComboBox').setValue(selectedRow.data.netUnit);
        	Ext.getCmp('fromCityComboBox').setValue(selectedRow.data.fromCity);
        	Ext.getCmp('toCityComboBox').setValue(selectedRow.data.toCity);
        	Ext.getCmp('txtShipper').setValue(selectedRow.data.shipperId);
        	Ext.getCmp('txtConsignee').setValue(selectedRow.data.consigneeId);
        	Ext.getCmp('chkWtValid').setValue(selectedRow.data.isWeightValid);
        	Ext.getCmp('chkGoodCust').setValue(selectedRow.data.isCustomerGood);
        	Ext.getCmp('chkDocsApproved').setValue(selectedRow.data.isDocumentApproved);
        	
        	var cgoNature = selectedRow.data.cargoNature;
        	if(cgoNature === "AW"){ Ext.getCmp('AWRadioButton').setValue(true); }
        	if(cgoNature === "RF"){ Ext.getCmp('RFRadioButton').setValue(true); }
        	if(cgoNature === "DG"){ Ext.getCmp('DGRadioButton').setValue(true); }
        	if(cgoNature === "GC"){ Ext.getCmp('GCRadioButton').setValue(true); }
        	
       		createbkg.show();
       		createbkg.setTitle("View");  
       		
       		//populate
       		
        }else{
            alert('Select only 1 record to View');
        }
    },

    init: function(application) {
        this.control({
            "#homeBtnViewBooking": {
                click: this.onHomeBtnViewBookingClick
            },
            "#homeBtnCreateBkg": {
                click: this.onHomeBtnCreateBkgClick
            },
            "#homeBtnEditBkg": {
                click: this.onHomeBtnEditBkgClick
            },
            "#txtCntrNum": {
                blur: this.onTxtCntrNumBlur
            },
            "#btnCreateBkg": {
                click: this.onBtnCreateBkgClick
            },
            "#CreateBooking": {
                beforeshow: this.onCreateBookingBeforeShow,
                close: this.onCreateBookingClose
            }
        });
    }

});
